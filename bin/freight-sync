#!/bin/bash
set -euo pipefail

# Get script directory and source libraries
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LIB_DIR="$(dirname "$SCRIPT_DIR")/lib"

source "$LIB_DIR/common.sh"
source "$LIB_DIR/logging.sh"
source "$LIB_DIR/socket.sh"

# Tool configuration
TOOL_NAME="sync"
VERSION="0.1.0"

# Default rsync flags for incremental sync
DEFAULT_SYNC_FLAGS="-avxHAX --numeric-ids --compress --update --delete"

# Usage information
usage() {
    cat << EOF
freight-sync - Incremental Synchronizer

USAGE:
    freight-sync [OPTIONS] SOURCE DESTINATION

ARGUMENTS:
    SOURCE       Source directory to sync from
    DESTINATION  Destination directory to sync to

OPTIONS:
    -h, --help       Show this help message
    -v, --verbose    Enable verbose output
    -q, --quiet      Suppress non-error output
    --version        Show version information
    --dry-run        Perform dry run without actual sync
    --config FILE    Use custom configuration file
    --rsync-flags    Custom rsync flags (overrides default)
    --no-delete      Don't delete files in destination (removes --delete flag)

DESCRIPTION:
    Handles live changes during migration window using incremental rsync.
    Requires connection to freight daemon for coordination. Designed to
    minimize final cutover window by syncing changes multiple times.

EXAMPLES:
    freight-sync /nfs1/user1 /nfs2/user1      # Incremental sync
    freight-sync --dry-run /src /dst          # Preview sync changes
    freight-sync --no-delete /src /dst        # Sync without deletions

EOF
}

# Parse command line arguments
parse_args() {
    VERBOSE=false
    QUIET=false
    DRY_RUN=false
    CONFIG_FILE=""
    CUSTOM_RSYNC_FLAGS=""
    NO_DELETE=false
    SOURCE_DIR=""
    DEST_DIR=""
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                usage
                exit 0
                ;;
            -v|--verbose)
                VERBOSE=true
                export CURRENT_LOG_LEVEL=$LOG_LEVEL_DEBUG
                shift
                ;;
            -q|--quiet)
                QUIET=true
                export CURRENT_LOG_LEVEL=$LOG_LEVEL_ERROR
                shift
                ;;
            --version)
                echo "freight-sync $VERSION"
                exit 0
                ;;
            --dry-run)
                DRY_RUN=true
                shift
                ;;
            --config)
                CONFIG_FILE="$2"
                shift 2
                ;;
            --rsync-flags)
                CUSTOM_RSYNC_FLAGS="$2"
                shift 2
                ;;
            --no-delete)
                NO_DELETE=true
                shift
                ;;
            -*)
                log_error "Unknown option: $1"
                usage >&2
                exit 1
                ;;
            *)
                if [[ -z "$SOURCE_DIR" ]]; then
                    SOURCE_DIR="$1"
                elif [[ -z "$DEST_DIR" ]]; then
                    DEST_DIR="$1"
                else
                    log_error "Too many arguments"
                    usage >&2
                    exit 1
                fi
                shift
                ;;
        esac
    done
    
    # Validate required arguments
    if [[ -z "$SOURCE_DIR" || -z "$DEST_DIR" ]]; then
        log_error "Both SOURCE and DESTINATION are required"
        usage >&2
        exit 1
    fi
}

# Load sync configuration
load_sync_config() {
    local config_file="$1"
    local sync_flags="$DEFAULT_SYNC_FLAGS"
    
    # Remove --delete flag if requested
    if [[ "$NO_DELETE" == "true" ]]; then
        sync_flags="${sync_flags/--delete/}"
    fi
    
    if [[ -n "$config_file" && -f "$config_file" ]]; then
        log_info "Loading configuration from: $config_file"
        
        if command -v jq >/dev/null 2>&1; then
            # Parse JSON config for sync-specific flags
            local config_sync_flags
            config_sync_flags="$(jq -r '.sync_flags // empty' "$config_file" 2>/dev/null || true)"
            if [[ -n "$config_sync_flags" ]]; then
                sync_flags="$config_sync_flags"
            fi
        else
            log_warn "jq not available, using default configuration"
        fi
    fi
    
    # Override with command line flags
    if [[ -n "$CUSTOM_RSYNC_FLAGS" ]]; then
        sync_flags="$CUSTOM_RSYNC_FLAGS"
    fi
    
    # Validate rsync flags
    validate_rsync_flags "$sync_flags"
    
    echo "$sync_flags"
}

# Check if daemon is available (required for sync)
check_daemon_connection() {
    if ! socket_test_connection; then
        log_error "Cannot connect to freight daemon - sync requires orchestrator"
        log_error "Please start the freight daemon first: freight daemon"
        return 1
    fi
    return 0
}

# Analyze what would be synced
analyze_sync_changes() {
    local source_dir="$1"
    local dest_dir="$2"
    local sync_flags="$3"
    
    log_info "Analyzing sync changes..."
    socket_progress "$TOOL_NAME" "$source_dir" "Analyzing changes"
    
    # Run rsync in dry-run mode to see what would change
    local rsync_cmd="rsync $sync_flags --dry-run --itemize-changes"
    
    # Ensure source ends with / for directory contents
    if [[ ! "$source_dir" =~ /$ ]]; then
        source_dir="$source_dir/"
    fi
    
    rsync_cmd="$rsync_cmd \"$source_dir\" \"$dest_dir\""
    
    log_debug "Analyzing with: $rsync_cmd"
    
    # Execute analysis
    local analysis_output
    local analysis_exit_code
    
    if analysis_output="$(eval "$rsync_cmd" 2>&1)"; then
        analysis_exit_code=0
    else
        analysis_exit_code=$?
    fi
    
    if [[ $analysis_exit_code -ne 0 ]]; then
        log_error "Failed to analyze sync changes (exit code: $analysis_exit_code)"
        log_error "Analysis output: $analysis_output"
        return 1
    fi
    
    # Parse rsync itemize output
    local files_to_update=0
    local files_to_delete=0
    local new_files=0
    local total_changes=0
    
    while IFS= read -r line; do
        if [[ -z "$line" ]]; then
            continue
        fi
        
        # Parse rsync itemize-changes format
        local change_type="${line:0:1}"
        case "$change_type" in
            ">") ((files_to_update++)) ;;
            "c") ((files_to_update++)) ;;  # checksum differs
            "*") ((files_to_delete++)) ;;  # deleting
            "<") ((new_files++)) ;;        # new file
        esac
        ((total_changes++))
    done <<< "$analysis_output"
    
    log_info "Sync analysis: $total_changes total changes"
    log_info "  - Files to update: $files_to_update"
    log_info "  - New files: $new_files"
    log_info "  - Files to delete: $files_to_delete"
    
    # Return results
    echo "$total_changes"
    echo "$files_to_update"
    echo "$new_files"
    echo "$files_to_delete"
    echo "$analysis_output"
}

# Perform incremental sync
perform_sync() {
    local source_dir="$1"
    local dest_dir="$2"
    local sync_flags="$3"
    
    log_info "Starting incremental sync: $source_dir -> $dest_dir"
    
    # Build rsync command
    local rsync_cmd="rsync $sync_flags"
    
    if [[ "$DRY_RUN" == "true" ]]; then
        rsync_cmd="$rsync_cmd --dry-run"
    fi
    
    # Add progress reporting for verbose mode
    if [[ "$VERBOSE" == "true" ]]; then
        rsync_cmd="$rsync_cmd --progress"
    fi
    
    # Ensure source ends with / for directory contents
    if [[ ! "$source_dir" =~ /$ ]]; then
        source_dir="$source_dir/"
    fi
    
    rsync_cmd="$rsync_cmd \"$source_dir\" \"$dest_dir\""
    
    log_debug "Executing: $rsync_cmd"
    
    # Execute sync and capture output
    local rsync_output
    local rsync_exit_code
    local start_time
    start_time="$(date +%s)"
    
    if rsync_output="$(eval "$rsync_cmd" 2>&1)"; then
        rsync_exit_code=0
    else
        rsync_exit_code=$?
    fi
    
    local end_time
    end_time="$(date +%s)"
    local duration=$((end_time - start_time))
    
    # Parse rsync output for statistics
    local bytes_transferred=0
    local transfer_rate=""
    local files_transferred=0
    
    if [[ -n "$rsync_output" ]]; then
        # Extract statistics from rsync output
        bytes_transferred="$(echo "$rsync_output" | grep -o 'sent [0-9,]* bytes' | grep -o '[0-9,]*' | tr -d ',' || echo "0")"
        transfer_rate="$(echo "$rsync_output" | grep -o '[0-9.]*[KMG]B/sec' || echo "")"
        files_transferred="$(echo "$rsync_output" | grep -o 'Number of files transferred: [0-9]*' | grep -o '[0-9]*' || echo "0")"
    fi
    
    # Log results
    if [[ $rsync_exit_code -eq 0 ]]; then
        log_info "Sync completed successfully in ${duration}s"
        if [[ -n "$transfer_rate" ]]; then
            log_info "Transfer rate: $transfer_rate"
        fi
        log_info "Files transferred: $files_transferred, Bytes: $(format_bytes "$bytes_transferred")"
    else
        log_error "Sync failed with exit code $rsync_exit_code"
        log_error "Rsync output: $rsync_output"
    fi
    
    # Return results
    echo "$rsync_exit_code"
    echo "$bytes_transferred"
    echo "$transfer_rate"
    echo "$files_transferred"
    echo "$duration"
    echo "$rsync_output"
}

# Main sync operation
perform_sync_operation() {
    local source_dir="$1"
    local dest_dir="$2"
    local freight_dir="$3"
    local operation_id
    
    operation_id="$(log_operation_start "sync" "$source_dir")"
    local start_time
    start_time="$(date +%s)"
    
    log_info "Starting sync operation: $source_dir -> $dest_dir"
    socket_start "$TOOL_NAME" "$source_dir"
    
    # Load configuration
    local config_file="$freight_dir/config.json"
    if [[ -n "$CONFIG_FILE" ]]; then
        config_file="$CONFIG_FILE"
    fi
    
    local sync_flags
    sync_flags="$(load_sync_config "$config_file")"
    
    log_info "Using sync flags: $sync_flags"
    
    # Analyze changes first
    local analysis_result
    analysis_result="$(analyze_sync_changes "$source_dir" "$dest_dir" "$sync_flags")"
    
    local total_changes
    total_changes="$(echo "$analysis_result" | sed -n '1p')"
    local files_to_update
    files_to_update="$(echo "$analysis_result" | sed -n '2p')"
    local new_files
    new_files="$(echo "$analysis_result" | sed -n '3p')"
    local files_to_delete
    files_to_delete="$(echo "$analysis_result" | sed -n '4p')"
    local analysis_output
    analysis_output="$(echo "$analysis_result" | sed -n '5,$p')"
    
    if [[ $total_changes -eq 0 ]]; then
        log_info "No changes detected - sync not needed"
        socket_stop "$TOOL_NAME" "$source_dir" "ok" "0" "No changes to sync"
        
        # Still write results for tracking
        local results_file="$freight_dir/sync.json"
        generate_sync_json "$source_dir" "$dest_dir" "$operation_id" "$start_time" "$(date +%s)" \
            "ok" "0" "" "0" "$sync_flags" "0" "$total_changes" "$files_to_update" "$new_files" "$files_to_delete" > "$results_file"
        
        return 0
    fi
    
    log_info "Found $total_changes changes to sync"
    socket_progress "$TOOL_NAME" "$source_dir" "Syncing $total_changes changes"
    
    # Perform the actual sync
    local sync_result
    sync_result="$(perform_sync "$source_dir" "$dest_dir" "$sync_flags")"
    
    # Parse sync results
    local exit_code
    exit_code="$(echo "$sync_result" | sed -n '1p')"
    local bytes_transferred
    bytes_transferred="$(echo "$sync_result" | sed -n '2p')"
    local transfer_rate
    transfer_rate="$(echo "$sync_result" | sed -n '3p')"
    local files_transferred
    files_transferred="$(echo "$sync_result" | sed -n '4p')"
    local duration
    duration="$(echo "$sync_result" | sed -n '5p')"
    local sync_output
    sync_output="$(echo "$sync_result" | sed -n '6,$p')"
    
    # Calculate overall duration
    local end_time
    end_time="$(date +%s)"
    local overall_duration=$((end_time - start_time))
    
    # Generate results
    local status="failed"
    local message="Sync failed"
    
    if [[ $exit_code -eq 0 ]]; then
        status="ok"
        message="Sync completed successfully"
        if [[ "$DRY_RUN" == "true" ]]; then
            message="[DRY RUN] Sync would complete successfully"
        fi
    fi
    
    log_info "Sync result: $message"
    log_info "Overall duration: ${overall_duration}s, Sync duration: ${duration}s"
    
    # Write results to JSON
    local results_file="$freight_dir/sync.json"
    generate_sync_json "$source_dir" "$dest_dir" "$operation_id" "$start_time" "$end_time" \
        "$status" "$bytes_transferred" "$transfer_rate" "$files_transferred" "$sync_flags" \
        "$duration" "$total_changes" "$files_to_update" "$new_files" "$files_to_delete" > "$results_file"
    
    # Send completion message
    socket_stop "$TOOL_NAME" "$source_dir" "$status" "$bytes_transferred" "$message"
    
    log_operation_end "sync" "$source_dir" "$operation_id" "$status" "$overall_duration" "$bytes_transferred"
    
    if [[ $exit_code -eq 0 ]]; then
        return 0
    else
        return 1
    fi
}

# Generate sync results JSON
generate_sync_json() {
    local source_dir="$1"
    local dest_dir="$2"
    local operation_id="$3"
    local start_time="$4"
    local end_time="$5"
    local status="$6"
    local bytes_transferred="$7"
    local transfer_rate="$8"
    local files_transferred="$9"
    local sync_flags="${10}"
    local sync_duration="${11}"
    local total_changes="${12}"
    local files_to_update="${13}"
    local new_files="${14}"
    local files_to_delete="${15}"
    
    # Generate complete JSON
    cat << EOF
{
  "sync_id": "$operation_id",
  "source_path": "$source_dir",
  "dest_path": "$dest_dir",
  "rsync_command": "rsync $sync_flags \"$source_dir/\" \"$dest_dir\"",
  "start_time": "$(date -d "@$start_time" -u +"%Y-%m-%dT%H:%M:%SZ")",
  "end_time": "$(date -d "@$end_time" -u +"%Y-%m-%dT%H:%M:%SZ")",
  "total_duration": $((end_time - start_time)),
  "sync_duration": $sync_duration,
  "bytes_transferred": $bytes_transferred,
  "transfer_rate": "$transfer_rate",
  "files_transferred": $files_transferred,
  "status": "$status",
  "dry_run": $([[ "$DRY_RUN" == "true" ]] && echo "true" || echo "false"),
  "changes_analysis": {
    "total_changes": $total_changes,
    "files_to_update": $files_to_update,
    "new_files": $new_files,
    "files_to_delete": $files_to_delete
  },
  "tool_version": "$VERSION",
  "hostname": "$(hostname)",
  "user": "$(whoami)"
}
EOF
}

# Main function
main() {
    # Parse arguments
    parse_args "$@"
    
    # Convert to absolute paths
    SOURCE_DIR="$(realpath "$SOURCE_DIR")"
    DEST_DIR="$(realpath "$DEST_DIR")"
    
    # Validate source directory
    if ! validate_directory "$SOURCE_DIR" "read"; then
        exit 1
    fi
    
    # Validate destination directory exists (should have been created by migrate)
    if ! validate_directory "$DEST_DIR" "write"; then
        log_error "Destination directory must exist for sync operation"
        log_error "Run freight-migrate first to create the initial copy"
        exit 1
    fi
    
    # Check daemon connection (required for sync)
    if ! check_daemon_connection; then
        exit 1
    fi
    
    # Set up logging
    local freight_dir
    freight_dir="$(get_freight_dir "$SOURCE_DIR")"
    ensure_freight_dir "$freight_dir"
    init_logging "$TOOL_NAME" "$freight_dir"
    
    # Initialize socket communication
    socket_init "$TOOL_NAME" "$SOURCE_DIR"
    socket_setup_cleanup
    
    # Set up signal handlers
    setup_signal_handlers
    
    log_system_info
    log_info "freight-sync $VERSION starting"
    log_info "Source: $SOURCE_DIR"
    log_info "Destination: $DEST_DIR"
    
    if [[ "$DRY_RUN" == "true" ]]; then
        log_info "DRY RUN MODE - no files will be transferred"
    fi
    
    if [[ "$NO_DELETE" == "true" ]]; then
        log_info "NO DELETE MODE - files will not be deleted from destination"
    fi
    
    # Perform the sync
    if perform_sync_operation "$SOURCE_DIR" "$DEST_DIR" "$freight_dir"; then
        log_info "Sync completed successfully"
        exit 0
    else
        log_error "Sync failed"
        exit 1
    fi
}

# Run main function
main "$@"